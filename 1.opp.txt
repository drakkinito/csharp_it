ООП – (Объектно-ориентированное программирование) —
парадигма программирования, в которой основными концепциями
являются понятия объектов и классов.

ООП має 6 парадигм:
    Інкапсуляція - модефікатори доступа(закриття реалізації), варіаці - закриття частин програмних частин, закриття типів даних
    - Наслідування
    - Поліморфізм
    - Абстракція
    - Посилка сообщений
    - Повторне використання

class — это конструкция языка, состоящая из ключевого слова class,
идентификатора (имени) и тела.
Класс может содержать в своем теле: поля, методы, свойства и события.

Поля определяют состояние, а методы поведение будущего объекта

Object and instances

    Обєкт і екземпляр це дві великі різниці:
        Объекты содержат в себе статические поля и все методы.
        Экземпляры содержат нестатические поля.

    // Створюємо змінну instance1 з типом MyClass і присвоюємо їй силку на екземпляр класа MyClass 
    (ключове слово new виділяє память "куча" область памяті які зберігає в собі не статичні поля, MyClass() це конструктор який в поле field вписує 0 і тільки потім уже переприсвоємо на 2.
    Далі в нас створюється обєкт який тримає в собі тільки методи і статичі якісь общі поля.
    Створюється не статичні поля і забезпечують унікальність екземпляра field)
    MyClass instance1 = new MyClass();
    MyClass instance2 = new MyClass();

    instance1.field=2;
    instance2.field=5;

    instance1.Method();
    instance2.Method();

    class MyClass
    {
        public string field; // Поле
        public void Method() // Метод
        {
            Console.WriteLine(field);
        }
    }


    Обєкт володіє двома природами: Состояния и поведение
        Состояния - значення полів або поля (екземпляр)
        Поведение - програмний код, тобто методами

Свойства:
    class MyClass
    {
        private string field = null;

        public string Field
        {
            set  // void SetField(string value)   -    Метод-мутатор - mutator   (setter)
            {
                field = value;               
            }

            get  // string GetField()             -    Метод-аксессор - accessor (getter)
            {
                return field;                 
            }            
        }
    }

    class Program
    {
        static void Main()
        {
            MyClass instance = new MyClass();

            // instance.SetField("Hello world");

            instance.Field = "Hello world!";    // Метод-мутатор

            Console.WriteLine(instance.Field);  // Метод-аксессор
            Console.WriteLine(new string('-', 50)); // --------------------------------------------------
            
            // Delay.
            Console.ReadKey();
        }
    }

    // Классы. Свойства с одним методом доступа.
    class Constants
    {
        private double pi = 3.14D;
        private double e = 2.71D;

        // Свойство только для записи.  - WriteOnly Property
        public double Pi
        {
            set { pi = value; }
        }

        // Свойство только для чтения.  -  ReadOnly Property
        public double E
        {
            get { return e; }
        }
    }

Constructor
    Конструктор класса — специальный метод, который вызывается во время построения класса.
        Конструктор позамовчуванню - инициализация полей значениями по умолчанию.
            public MyClass() { }
        Пользувательский конструктор - инициализация полей предопределенными пользователем значениями.
            public MyClass(int arg) { }

    Если в теле класса не определен явно ни один конструктор, то всегда используется
    «невидимый» конструктор по умолчанию.
    Имя конструктора всегда совпадает с именем класса. Конструкторы не имеют возвращаемых
    значений.

    class Program
    {       
        static void Main()
        {
            // Применяем конструктор по умолчанию.
            Point pointA = new Point();
            Console.WriteLine("pointA.X = {0} pointA.Y = {1}", pointA.X, pointA.Y);

            Console.WriteLine(new string('-', 30));

            // Применяем конструктор с параметрами.
            Point pointB = new Point(100, 200);
            Console.WriteLine("pointB.X = {0} pointB.Y = {1}", pointB.X, pointB.Y);

            // Delay.
            Console.ReadKey();
        }
    }
    class Point
    {
        // Поля.
        private int x, y;

        // Свойства.
        public int X
        {
            get { return x; }
        }

        public int Y
        {
            get { return y; }
        }
        
        // Конструктор по умолчанию, инициализирует поля значениями по умолчанию.
        public Point()
        {
            Console.WriteLine("Конструктор по умолчанию!");
        }

        // Пользовательский конструктор, инициализирует поля значениями заданными пользователем.
        public Point(int x, int y)
        {
            Console.WriteLine("Пользовательский конструктор!");
            this.x = x; // this звертається до х в обєкті
            this.y = y; // this звертається до У в обєкті
        }
    }

    !!  Если в классе имеется пользовательский конструктор, и при этом требуется создавать
        экземпляры класса с использованием конструктора по умолчанию, то конструктор по
        умолчанию должен быть определен в теле класса явно, иначе возникнет ошибка на
        уровне компиляции.
        // ВАЖНО: 
        // Если вы создали пользовательский конструктор (принимающий аргументы),    
        // то конструктор по умолчанию, автоматически создаваться НЕ БУДЕТ, его придется создать явно.  

    
    Конструкторы, вызывающие другие конструкторы
    Конструктор может вызывать в том же самом объекте другой конструктор с помощью ключевого слова this.

    Один конструктор может вызывать другой конструктор того же класса, если после
    сигнатуры вызывающего конструктора поставить ключевое слово this и указать набор
    параметров, который должен совпадать по количеству и типу с набором параметров
    вызываемого конструктора .

    !!  Попытка вызова конструктора с не существующим набором параметров приведет к
        ошибке уровня компиляции.   

    class Program
    {
        static void Main()
        {            
            Point point = new Point("A");
            Console.WriteLine("{0}.X = {1}, {0}.Y = {2}", point.Name, point.X, point.Y);

            // Delay.
            Console.ReadKey();
        }
    }

    class Point
    {
        // Поля.

        private int x, y;
        private string name;

        // Свойства.
        public int X
        {
            get { return x; }
        }

        public int Y
        {
            get { return y; }
        }
        
        public string Name
        {
            get { return name; }
        }

        // Конструкторы.

        // Использование ключевого слова this в конструкторе  с одним параметром с 43-й строки,
        // приводит к вызову этого конструктора.
        public Point(int x, int y)
        {
            Console.WriteLine("Конструктор с двумя параметрами.");
            this.x = x;
            this.y = y;
        }

        // Использование ключевого слова this в конструкторе приводит к вызову конструктора с двумя параметрами с 35-й строки.
        public Point(string name)
            : this(300, 400)
        {
            Console.WriteLine("Конструктор с одним параметром.");
            this.name = name;
        }
    }

    Exemple:
    class Person
    {
        public string name;
        public int age;
    
        public Person() : this("Неизвестно")
        {
        }
        public Person(string name) : this(name, 18)
        {
        }
        public Person(string name, int age)
        {
            this.name = name;
            this.age = age;
        }
        public void GetInfo()
        {
            Console.WriteLine($"Имя: {name}  Возраст: {age}");
        }
    }

    Инициализаторы объектов:
    Person tom = new Person { name = "Tom", age=31 };
    tom.GetInfo();          // Имя: Tom  Возраст: 31
    
Передача аргумента класа в якості аргумента

    class MyClass
    {
        public void Method()
        {
            Console.WriteLine("Hello World");
        }
    }
    class MyClass2
    {
        public void CallMethod(MyClass my)
        {
            my.Method();
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            MyClass instance = new MyClass();
            MyClass2 instance2 = new MyClass2();

            instance2.CallMethod(instance);

            Console.ReadKey();
        }
    }

    Автоматически реализуемые свойства (Auto-Implemented properties). 

    Автоматически реализуемые свойства это более лаконичная форма свойств, их есть смысл
    использовать, когда в методах доступа get и set не требуется дополнительная логика.
    
    При создании автоматически реализуемых свойств, компилятор создаст закрытое,
    анонимное резервное поле, которое будет доступно с помощью методов get и set свойства.

    class Program
    {
        public class Author
        {
            // Автоматически реализуемые свойства. 
            public string Name { get; set; }
            public string Book { get; set; }
        }

        static void Main()
        {
            Author author1 = new Author()
            {
                Name = "Jeffrey Richter",            // Блок инициализатора.
                Book = "CLR via C#"
            };

            Author author2 = new Author        // ()
            {
                Name = "Steve McConnell",            // Блок инициализатора.
                Book = "Code Complete"
            };

            Console.WriteLine("Name: {0}, Book: {1}", author1.Name, author1.Book);
            Console.WriteLine("Name: {0}, Book: {1}", author2.Name, author2.Book);

            // Delay.
            Console.ReadKey();
        }
    }

    Создание экземпляра по слабой ссылке. (Анонимные объекты)

    Создание экземпляра класса по сильной ссылке
        MyClass instance = new MyClass();
        instance.Method();
    Создание экземпляра класса по слабо
        new MyClass().Method();
    
    class MyClass
    {
        public void Method()
        {
            Console.WriteLine("Hello world!");
        }
    }

    class Program
    {
        static void Main()
        {
            new MyClass().Method();

            // Delay.
            Console.ReadKey();
        }
    }